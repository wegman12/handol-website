# .github/workflows/cd.yaml
name: Deploy to Development Server
on:
  push:
    branches:
      - main
env:
  VERSION: v1.0.7
  IMAGE_NAME: kwegmansoftware/handol-church
jobs:
  publish-image:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: 'true'

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Set up Docker Buildx (optional but recommended for advanced builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          sbom: true
          provenance: mode=max
          push: true
          tags: '${{ env.IMAGE_NAME }}:${{ env.VERSION }}'
          context: .

      - name: Build and push image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          sbom: true
          provenance: mode=max
          push: true
          tags: '${{ env.IMAGE_NAME }}:latest'
          context: .

  deploy-image:
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    needs:
      - publish-image
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Register private key
        run: |
          eval `ssh-agent` && \
          ssh-add /home/kevin/.ssh/agent_node

      - name: Execute Ansible Playbook
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          VERSION: ${{ env.VERSION }}
        run: |
          ansible-playbook \
          -i ansible/inventory.ini \
          -u agent \
          --private-key /home/kevin/.ssh/node_agent \
          ansible/playbook-deploy.yaml

  cd:
    runs-on: ubuntu-latest
    needs:
      - publish-image
      - deploy-image
    steps:
      - run: echo "Workflows have succeeded!"
